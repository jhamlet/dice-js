var Proteus = require("proteus"),
    DICE_ASPECTS = [
        "roll",
        "reset",
        "result",
        "results",
        "valueOf",
        "toString"
    ]
;

module.exports = Proteus.Class.derive({
    /**
     * Initialize a BehaviorManager for a dice instance
     * 
     * @constructor
     * @param {object} dice
     */
    init: function (dice) {
        this.dice = dice;
        
        Object.defineProperties(dice, {
            __behaviorMgr__: { value: this }
        });
        
        Object.defineProperties(this, {
            __behaviors__: { value: [] },
            __inspecting__: { writable: true }
        });
        
        this.initDice();
    },
    
    initDice: function () {
        var self = this,
            dice = this.dice
        ;

        DICE_ASPECTS.forEach(function (aspect) {
            var spec    = Proteus.getPropertyDescriptor(dice, aspect),
                getter  = spec.get,
                setter  = spec.set,
                value   = spec.value,
                proxy
            ;
            
            self[aspect] = spec;
            proxy = function () {
                var fn = (arguments.length > 0 ? setter : getter) || value,
                    ret = fn.apply(dice, arguments)
                ;

                return self.__inspecting__ ? ret :
                    self.apply.call(self, aspect, Proteus.slice(arguments)) || ret;
            };
            
            if (!getter && !setter) {
                spec.value = proxy;
            }
            else {
                spec.get = spec.set = proxy;
            }
            
            Object.defineProperty(dice, aspect, spec);
        });
    },
    /**
     * Add a named behavior
     * 
     * @method add
     * @param {string} name name of the behavior to add
     * @param {mixed} rest additional parameters get passed to the behavior constructor
     * @returns {object} BehaviorManager
     */
    add: function (name) {
        var Behavior = require("dice-js/behaviors").get(name),
            behavior = Object.create(Behavior.prototype)
        ;
        
        this.__behaviors__.push(Behavior.apply(behavior, Proteus.slice(arguments, 1)));
        
        return this;
    },
    /**
     * Apply all behaviors for the invoked aspect
     * 
     * @method apply
     * @param {string} aspect method name being called
     * @param {array} args array of arguments to pass
     * @returns {mixed} the results of the behavior aspect calls
     */
    apply: function (aspect, args) {
        var self = this;
        args.unshift(this.dice);
        return this.__behaviors__.reduce(function (acc, behavior) {
            var fn, ret;
            if (typeof (fn = behavior[aspect]) === "function") {
                self.__inspecting__ = true;
                ret = fn.apply(behavior, args);
                self.__inspecting__ = false;
                return ret;
            }
        }, undefined);
    }
});
