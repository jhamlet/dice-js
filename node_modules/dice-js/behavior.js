
var Proteus = require("proteus"),
    DICE_ASPECTS = [
        "count",
        "faces",
        "roll",
        "rolled",
        "reset",
        "format",
        "result",
        "results",
        "valueOf",
        "toString",
    ],
    Behavior
;
//---------------------------------------------------------------------------
// Privates // Short-cuts
//---------------------------------------------------------------------------
/**
 * @function makeProxy
 * @param {Object} behavior the behavior we are proxying
 * @param {Object} dice the dice object
 * @param {String} aspect the particular method/property we are proxying
 */
function makeProxy (behavior, dice, aspect) {
    var spec   = Proteus.getPropertyDescriptor(dice, aspect),
        getter = spec.get,
        setter = spec.set,
        value  = spec.value,
        proxy
    ;
    
    proxy = function () {
        // console.log(aspect);
        var fn     = (arguments.length > 0 ? setter : getter) || value,
            result = fn.apply(dice, arguments),
            args   = [dice, result],
            ret    = behavior[aspect].apply(behavior, args)
        ;
        
        return ret === undefined ? result : ret;
    };
    
    if (getter || setter) {
        spec.get = spec.set = proxy;
    }
    else {
        spec.value = proxy;
    }

    // console.log(aspect, spec);
    Object.defineProperty(dice, aspect, spec);
}
//---------------------------------------------------------------------------
// Exports
//---------------------------------------------------------------------------
module.exports = Behavior = Proteus.Class.derive({
    
    self: Object.defineProperties({
        
        initialize: function (instance, args) {
            // if behavior is undefined, the normal instantiation of behavior takes place
            return this.find(args[0]);
        },
        
        get: function (name) {
            var behavior = this.__behaviors__[name] || this.find(name);
            
            if (!behavior) {
                throw "Unknown behavior '" + name + "'";
            }
            
            return behavior;
        },
        
        find: function (name) {
            var behaviors = this.__behaviors__,
                behavior
            ;
            
            Object.keys(behaviors).some(function (key) {
                var obj = behaviors[key],
                    abbrev = obj.abbreviation
                ;
                
                if (key === name || abbrev === name) {
                    behavior = obj;
                    return true;
                }
            });
            
            return behavior;
        }
        
    }, {
        __behaviors__: { value: {} }
    }),
    
    init: function (name, props) {
        Proteus.merge(this, props);
        Behavior.__behaviors__[name] = this;
    },
    
    attach: function (dice) {
        var self = this,
            OP = Object.prototype
        ;
            
        DICE_ASPECTS.forEach(function (aspect) {
            var prop = self[aspect];
            
            if (!prop || prop === OP.valueOf || prop === OP.toString) { return; }
            makeProxy(self, dice, aspect);
        });
    }
    
});
