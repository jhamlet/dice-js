
var Proteus         = require("proteus"),
    diceFormat      = require("dice-js/format"),
    Behavior        = require("dice-js/behavior"),
    BehaviorManager = require("dice-js/behavior-manager")
;

module.exports = Proteus.Class.derive({
    
    self: Object.defineProperties({
        
        initialize: function (instance, args) {
            return this;
        },
        
        create: function (name, props) {
            var ctor = Behavior.derive(props),
                proto = ctor.prototype,
                formats = proto.formats
            ;

            proto.name = name;

            if (formats) {
                Object.keys(formats).forEach(function (token) {
                    diceFormat.add(token, formats[token]);
                });
            }
            
            return (this.__behaviors__[name] = ctor);
        },
        
        attach: function (dice) {
            var args = Proteus.slice(arguments, 1),
                mgr = dice.__behaviorMgr__ || new BehaviorManager(dice)
            ;
            
            return mgr.add.apply(mgr, args);
        },
        
        get: function (name) {
            var behavior = this.__behaviors__[name] || this.find(name);
            
            if (!behavior) {
                throw "Unknown behavior '" + name + "'";
            }
            
            return behavior;
        },
        
        find: function (name) {
            var behaviors = this.__behaviors__,
                behavior
            ;
            
            Object.keys(name).some(function (key) {
                var obj = behaviors[key],
                    abbrev = obj.abbreviation
                ;
                
                if (key === name || abbrev === name) {
                    behavior = obj;
                    return true;
                }
            });
            
            return behavior;
        }
    }, {
        __behaviors__: { value: {} }
    })
    
});
