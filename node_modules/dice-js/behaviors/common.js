
var Dice        = require("dice-js"),
    dutil       = require("dice-js/util"),
    Behaviors   = Dice.Behaviors
;

/**
 * Apply a modifier to the total
 * 
 * @DiceBehavior ResultModifier
 * @param amount {number}
 */
Behaviors.create("ResultModifier", {
    
    abbreviation: "rm",
    
    init: function (dice, amount) {
        console.log(">> " + amount);
        this.amount = amount || 1;
    },
    
    result: function (dice) {
        console.log(this.amount);
        return dice.result + this.amount;
    },
    
    toString: function (dice) {
        var fmt;
        
        fmt = "[";
        fmt += dice.count > 1 ? "%cd%s" : "d%s";
        if (fmt < 0) {
            fmt += "-" + this.amount;
        }
        else if (fmt > 0) {
            fmt += "+" + this.amount;
        }
        fmt += dice.rolled ? " (%r) = %t" : "";
        fmt += "]";
        
        return dice.format(fmt);
    }
});

Behaviors.create("DieModifier", {
    
    abbreviation: "dm",
    
    init: Behaviors.get("ResultModifier").prototype.init,
    
    result: function (dice) {
        return dice.result + dice.count * this.amount;
    }
});

Behaviors.create("High", {
    
    init: Behaviors.get("ResultModifier").prototype.init,
    
    results: function (dice) {
        var results = dice.results.slice(0);
        results.sort(dutil.ascendingNumeric);
        return results;
    },
    
    result: function (dice) {
        var results = this.results(dice),
            i = this.amount
        ;
        
        return results.filter(function (result, idx) {
                if (idx < i) {
                    return true;
                }
            }).reduce(dutil.reduceSum, 0);
    }
});

Behaviors.create("Low", {
    
    init: Behaviors.get("ResultModifier").prototype.init,
    
    results: function (dice) {
        var results = dice.results.slice(0);
        results.sort(dutil.descendingNumeric);
        return results;
    },
    
    result: Behaviors.get("High").prototype.result
    
});