
var Proteus = require("proteus"),
    DiceBehavior,
    DiceBehaviors
;

DiceBehavior = Proteus.Class.derive({
    
    self: {
        initialize: function (instance, args) {
            var proto = this.prototype,
                fn = proto.init
            ;
            
            if (typeof fn !== "function") {
                return proto;
            }
        }
    },
    
    
});

module.exports = DiceBehaviors = Proteus.Class.derive({
    
    self: {
        
        create: function (name, props) {
            var ctor = function () { DiceBehavior.apply(this, arguments); };
            Proteus.merge(ctor.prototype, props);
            ctor.prototype.name = name;
            return (this.__behaviors__[name] = ctor);
        },
        
        get: function (name) {
            var behavior = this.__behaviors__[name] || this.find(name);
            
            if (!behavior) {
                throw "Unknown behavior '" + name + "'";
            }
            
            return behavior;
        },
        
        find: function (name) {
            var behaviors = this.__behaviors__,
                behavior
            ;
            
            Object.keys(name).some(function (key) {
                var obj = behaviors[key],
                    abbrev = obj.abbreviation
                ;
                
                if (key === name || abbrev === name) {
                    behavior = obj;
                    return true;
                }
            });
            
            return behavior;
        }
    }
    
});

Object.defineProperties(DiceBehaviors, {
    __behaviors__: { value: {} }
});