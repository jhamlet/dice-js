
var Proteus         = require("proteus"),
    DiceBehaviors   = require("dice-js/behaviors"),
    formatDice      = require("dice-js/format"),
    Dice
;

module.exports = Dice = Proteus.Class.derive(Object.defineProperties({
    /**
     * Dice represents a collection of a number of dice all having the same
     * number of sides
     */
    init: function (count, sides) {
        var behaviors;
        
        if (arguments.length < 2) {
            sides = count;
            count = 1;
            behaviors = Proteus.slice(arguments, 1);
        }
        else {
            behaviors = Proteus.slice(arguments, 2);
        }
        
        if (!sides || sides < 2 || typeof sides !== "number") {
            throw "Argument to Die constructor must be a number greater than 1.";
        }

        Object.defineProperties(this, {
            count:       { value: count, writable: true, enumerable: true },
            sides:       { value: sides, writable: true, enumerable: true },
            __result__:  { value: 0, writable: true },
            __results__: { value: [] }
        });
        
        behaviors.forEach(function (args) {
            args.unshift(this);
            DiceBehaviors.attach.apply(DiceBehaviors, args);
        }, this);
    },
    
    roll: function () {
        var total   = 0,
            results = this.__results__,
            len     = this.count,
            sides   = this.sides,
            i       = 0,
            roll
        ;
        
        this.reset();
        
        for (i = 0; i < len; i++) {
            roll = Math.floor(Math.random() * sides) + 1;
            results.push(roll);
            total += roll;
        }
        
        this.__result__ = total;

        return this;
    },
    
    reset: function () {
        this.__result__ = this.__results__.length = 0;
        return this;
    },
    
    format: function (fmt) {
        return formatDice(this, fmt);
    }
    
}, {
    rolled: { get: function () {
        return !!this.__results__.length;
    }, enumerable: true },
    
    result: { get: function () {
        return this.__result__;
    }, enumerable: true },
    
    results: { get: function () {
        return this.__results__;
    }, enumerable: true },
    
    valueOf: { value: function () {
        return this.result;
    }, writable: true },
    
    toString: { value: function () {
        var fmt;
        
        fmt = "[";
        fmt += this.count > 1 ? "%cd%s" : "d%s";
        fmt += this.rolled ? " (%r) = %t" : "";
        fmt += "]";
        
        return this.format(fmt);
    }, writable: true }
    
}));
