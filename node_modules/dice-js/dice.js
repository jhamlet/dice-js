
var Proteus = require("proteus"),
    Dice
;

module.exports = Dice = Proteus.Class.derive(Object.defineProperties({
    /**
     * Dice represents a collection of a number of dice all having the same
     * number of sides
     */
    init: function (count, sides) {
        if (arguments.length < 2) {
            sides = count;
            count = 1;
        }
        
        if (!sides || sides < 2 || typeof sides !== "number") {
            throw "Argument to Die constructor must be a number greater than 1.";
        }

        Object.defineProperties(this, {
            count:      { value: count, writable: true, enumerable: true },
            sides:      { value: sides, writable: true, enumerable: true },
            result:     { value: 0, writable: true, enumerable: true },
            results:    { value: [], enumerable: true }
        });
    },
    
    roll: function () {
        var total   = 0,
            results = this.results,
            len     = this.count,
            sides   = this.sides,
            i       = 0,
            roll
        ;
        
        this.reset();
        
        for (i = 0; i < len; i++) {
            roll = Math.floor(Math.random() * sides) + 1;
            results.push(roll);
            total += roll;
        }
        
        this.result = total;

        return this;
    },
    
    reset: function () {
        this.result = this.results.length = 0;
        return this;
    },
    /**
     * %s = sides
     * %c = count
     * %r = results
     * %t = total
     * %dN = die result N
     */
    format: function (fmt) {
        var self = this;
        // TODO: add the regex and the replace function to the prototype
        return fmt.replace(/%(.)(\d+)?/g, function (match, token, idx) {
            switch (token) {
                case "s":
                    return self.sides;
                case "c":
                    return self.count;
                case "t":
                    return self.result;
                case "d":
                    idx = parseInt(idx, 10);
                    if (idx) {
                        return self.results[idx];
                    }
                    // break; // fall-through on purpose
                case "r":
                    return self.results.join(", ");
            }
        });
    }
    
}, {
    rolled: { get: function () {
        return !!this.results.length;
    }, enumerable: true },
    
    valueOf: { value: function () {
        return this.result;
    }, writable: true },
    
    toString: { value: function () {
        var fmt;
        
        fmt = "[";
        fmt += this.count > 1 ? "%cd%s" : "d%s";
        fmt += this.rolled ? " (%r) = %t" : "";
        fmt += "]";
        
        return this.format(fmt);
    }, writable: true }
}));
