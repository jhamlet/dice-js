
var Proteus = require("proteus"),
    Die     = require("dice-js/die"),
    dutil   = require("dice-js/util"),
    Dice
;

module.exports = Dice = Proteus.Class.derive(Object.defineProperties({
    /**
     * Dice represents a collection of a number of dice, which may, or may
     * not, all have the same number of sides
     */
    init: function () {
        Object.defineProperties(this, {
            members:    { value: [], enumerable: true },
            results:    { value: [], enumerable: true },
            __dirty__:  { value: false, writable: true },
            __result__: { value: 0, writable: true }
        });
        
        if (arguments.length) {
            this.add.apply(this, arguments);
        }
    },
    
    add: function (num, sides) {
        var i;
        
        if (arguments.length < 2) {
            sides = num;
            num = 1;
        }

        for (i = 0; i < num; i++) {
            this.push(new Die(sides));
        }
        
        this.__dirty__ = true;
        
        return this;
    },
    
    remove: function (idx) {
        var ret;
        
        if (this.members[idx]) {
            this.members.splice(idx, 1);
            ret = this.results.splice(idx, 1);
            this.__dirty__ = true;
        }
        
        return ret;
    },
    
    roll: function () {
        var total   = 0,
            dice    = this.members,
            results = this.results,
            len, i, roll
        ;
        
        this.reset();
        
        for (i = 0, len = dice.length; i < len; i++) {
            roll = dice[i].roll();
            results.push(roll);
        }

        return this;
    },
    
    clear: function () {
        this.reset();
        this.members.length = 0;
        return this;
    },
    
    reset: function () {
        this.results.length = 0;
        delete this.result;
        this.__dirty__ = true;
        return this;
    }
    
}, {
    length: { get: function () {
        return this.members.length;
    }, enumerable: true },
    
    result: { get: function () {
        if (this.__dirty__) {
            this.roll();
            this.__result__ = this.results.reduce(dutil.reduceSum, 0);
            this.__dirty__ = false;
        }
        return this.__result__;
    }, enumerable: true },
    
    rolled: { get: function () {
        var dice = this.members,
            results = this.results,
            resultsLen = results.length
        ;
        return !!(resultsLen && dice.length === resultsLen);
    }, enumerable: true },
    
    valueOf: { value: function () {
        return this.result;
    }, writable: true },
    
    toString: { value: function () {
        var dice = this.members.reduce(function (acc, die) {
                var sides = die.sides,
                    val = acc[die.sides]
                ;
                
                acc[sides] = val ? val + 1 : 1;
                return acc;
            }, {})
        ;
        
        return "[" +
            Object.keys(dice).sort(dutil.numericSort).
            map(function (key) {
                return dice[key] + "d" + key;
            }).join(", ") + "]";
    }, writable: true }
}));

["pop", "shift"].forEach(function (method) {
    Dice.prototype[method] = function () {
        return this.members[method]();
    };
});

["push", "unshift"].forEach(function (method) {
    Dice.prototype[method] = function () {
        var dice = this.members;
        
        if (!(arguments[0] instanceof Die)) {
            throw "Argument to Dice#" + method + " expected to be an instance of Die";
        }

        return dice[method].apply(dice, arguments);
    };
});