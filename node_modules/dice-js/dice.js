
var Proteus = require("proteus"),
    dutil   = require("dice-js/util"),
    format  = dutil.format,
    Dice
;

Dice = Proteus.Class.derive(Object.defineProperties({
    /**
     * Dice represents a collection of a number of dice all having the same
     * number of faces
     * 
     * @constructor
     * @param {Number} count optional, the number of dice to roll. Defaults to 1.
     * @param {Number} faces optional, the highest result for one die roll. Defaults to 6.
     */
    init: function (count, faces) {
        if (arguments.length < 2) {
            faces = count || 6;
            count = 1;
        }
        
        if (!faces || faces < 2 || typeof faces !== "number") {
            throw "Argument to Die constructor must be a number greater than 1.";
        }

        Object.defineProperties(this, {
            __count__:   { value: count, writable: true },
            __faces__:   { value: faces, writable: true },
            __results__: { value: [] }
        });
    },
    /**
     * @method roll
     * @returns {Dice} the instance
     */
    roll: function () {
        var rand    = dutil.randomNumber,
            results = this.__results__,
            len     = this.__count__,
            faces   = this.__faces__,
            i       = 0,
            roll
        ;
        
        this.reset();
        
        for (i = 0; i < len; i++) {
            roll = rand(1, faces);
            results.push(roll);
        }
        
        return this;
    },
    /**
     * @method reset
     * @returns {Dice} the instance
     */
    reset: function () {
        this.__results__.length = 0;
        return this;
    },
    /**
     * @method format
     * @param {String} fmt the format to use
     * @returns {String} the formatted string based on this instances values
     */
    format: function (fmt) {
        return format(this, fmt);
    }
    
}, {
    /**
     * @property count
     * @type {Number}
     * @default 1
     */
    count: {
        get: function () { return this.__count__; },
        set: function (v) { this.__count__ = v; },
        enumerable: true,
        configurable: true
    },
    /**
     * @property faces
     * @type {Number}
     * @default 6
     */
    faces: {
        get: function () { return this.__faces__; },
        set: function (v) { this.__faces__ = v; },
        enumerable: true,
        configurable: true
    },
    /**
     * @property rolled
     * @type {Boolean}
     * @default false
     */
    rolled: { get: function () {
        var len = this.__results__.length;
        return !!(len && len === this.__count__);
    }, enumerable: true, configurable: true },
    /**
     * @property result
     * @type {Number}
     * @default 0
     */
    result: { get: function () {
        if (!this.rolled) {
            this.roll();
        }
        return this.results.reduce(dutil.reduceSum, 0);
    }, enumerable: true, configurable: true },
    /**
     * @property results
     * @type {Array[Number]}
     * @default []
     */
    results: { get: function () {
        if (!this.rolled) {
            this.roll();
        }
        return this.__results__;
    }, enumerable: true, configurable: true },
    /**
     * @method valueOf
     * @returns #result
     */
    valueOf: { value: function () {
        return this.result;
    }, configurable: true },
    /**
     * @method toString
     * @returns a formatted string
     */
    toString: { value: function () {
        var fmt;
        
        fmt = "[";
        fmt += this.count > 1 ? "%cd%s" : "d%s";
        fmt += this.rolled ? " (%r) = %t" : "";
        fmt += "]";
        
        return this.format(fmt);
    }, configurable: true }
    
}));

module.exports = Dice;