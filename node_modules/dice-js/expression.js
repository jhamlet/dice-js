
var Proteus = require("proteus"),
    Dice    = require("dice-js/dice"),
    Expression
;

module.exports = Expression = Proteus.Class.derive(Object.defineProperties({
    
    self: {
        makeOperation: function (name, symbol) {
            var Operator = require("dice-js/operator"),
                Operation = Operator.Operation
            ;
            
            this.prototype[symbol] = function (rVal) {
                var members     = this.members,
                    lIdx        = members.length - 1,
                    lVal        = members[lIdx],
                    rValIsExp   = rVal instanceof Expression,
                    rValIsOp    = rVal instanceof Operation
                ;
                
                if (!lVal) {
                    return this.add(rVal);
                }
                
                if (lVal instanceof Operation) {
                    if (typeof lVal.right === "undefined") {
                        lVal.right = rVal;
                    }
                    else {
                        if (rValIsOp || rValIsExp) {
                            lVal.right = rVal;
                        }
                        else {
                            lVal.right = new Operator(symbol, lVal.right, rVal);
                        }
                    }
                }
                else {
                    lVal = new Operator(symbol, lVal, rVal);
                    members[lIdx] = lVal;
                }
            };
        }
    },
    
    init: function () {
        this.members = [];
        Proteus.slice(arguments).forEach(this.add, this);
    },
    
    get: function (idx) {
        return this.members[idx];
    },
    
    add: function (exp) {
        return this.members.push(exp);
    },
    
    remove: function (idx) {
        return this.members.splice(idx, 1);
    },
    
    reset: function () {
        this.members.length = 0;
        return this;
    }
    
}, {
    count: {
        get: function () {
            return this.members.length;
        },
        set: function (v) {
            this.members.length = v;
        }
    },
    
    valueOf: { value: function () {
        var results = [],
            len     = this.count,
            i
        ;
        
        for (i = 0; i < len; i++) {
            results.push(this.get(i).valueOf());
        }
        
        return results.length <= 1 ? results[0] : results;
    } }
}));

