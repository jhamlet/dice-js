
var Proteus     = require("proteus"),
    Expression  = require("dice-js/expression"),
    Operator,
    Operation
;

Operation = Proteus.Class.derive(Object.defineProperties({

    init: function (lVal, rVal) {
        this.left   = lVal;
        this.right  = rVal;
    },
    
    associativity: undefined,
    
    precedence: 0
    
}, {

    valueOf: { value: function () {
        var lVal     = this.left,
            rVal     = this.right,
            symbol   = this.symbol,
            assoc    = this.associativity,
            assocVal,
            val,
            ret
        ;
        
        if (assoc === "left") {
            assocVal = lVal;
            val = rVal;
        }
        else {
            assocVal = rVal;
            val = lVal;
        }
        
        if (typeof assocVal[symbol] === "function" &&
            (ret = assocVal[symbol].call(assocVal, val)) !== undefined
        ) {
            return ret;
        }
        
        return this.operation(assocVal, val);
    } }
    
}));

Operator = Proteus.Class.derive({
    
    self: {
        
        Operation: Operation,
        
        initialize: function (instance, args) {
            return this[args[0]].make(Proteus.slice(args, 1));
        },
        
        define: function (name, props) {
            return this.derive(Operation, name, props);
        },
        
        derive: function (base, name, props) {
            var ctor = (typeof base === "string" ? this[base] : base).derive(props),
                proto  = ctor.prototype,
                symbol = proto.symbol,
                nil
            ;
            
            proto.name  = name;
            this[name] = ctor;
            nil = symbol && (this[symbol] = ctor);
            Expression.makeOperation(name, symbol);
            
            return ctor;
        }
    }
});

module.exports = Operator;

require("./common");