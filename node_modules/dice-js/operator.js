
var Proteus = require("proteus"),
    Operator,
    Operation
;

Operation = Proteus.Class.derive(Object.defineProperties({

    init: function (lVal, rVal) {
        this.left   = lVal;
        this.right  = rVal;
    },
    
    associativity: undefined,
    
    precedence: 0
    
}, {

    valueOf: { value: function () {
        var lVal     = this.left,
            rVal     = this.right,
            symbol   = this.symbol,
            assoc    = this.associativity,
            assocVal,
            val
        ;
        
        if (assoc === "left") {
            assocVal = lVal;
            val = rVal;
        }
        else {
            assocVal = rVal;
            val = lVal;
        }
        
        if (typeof assocVal[symbol] === "function") {
            return assocVal[symbol].call(assocVal, val);
        }
        
        val = val === undefined ? val : val.valueOf();
        assocVal = assocVal === undefined ? assocVal : assocVal.valueOf();
        return this.operation(assocVal, val);
    } }
    
}));

Operator = Proteus.Class.derive({
    
    self: {
        
        initialize: function (instance, args) {
            return this[args[0]].make(Proteus.slice(args, 1));
        },
        
        define: function (name, props) {
            var ctor = Operation.derive(props),
                proto = ctor.prototype
            ;
            
            ctor.name = name;
            this[name] = ctor;
            
            if (proto.symbol) {
                this[proto.symbol] = ctor;
            }
            
            return ctor;
        }
        
    }
});

module.exports = Operator;

require("./operators/index.js");
