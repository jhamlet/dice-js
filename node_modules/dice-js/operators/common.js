
var Operator = require("dice-js/operator");

function operateOn (op, lVal, rVal) {
    switch (op) {
        case "+":
            return lVal + rVal;
        case "-":
            return lVal - rVal;
        case "/":
            return lVal / rVal;
        case "*":
            return lVal * rVal;
    }
}

function commonOperation (lVal, rVal) {
    var op          = this.symbol,
        lValIsArray = Array.isArray(lVal),
        rValIsArray = Array.isArray(rVal),
        lValIsObj   = typeof lVal === "object",
        rValIsObj   = typeof rVal === "object"
    ;
    
    if (lValIsArray) {
        if (rValIsArray) {
            return rVal.map(function (val, idx) {
                if (typeof lVal[idx] === "undefined") {
                    return val;
                }
                else {
                    return operateOn(op, lVal[idx], val);
                }
            });
        }
        else if (rValIsObj) {
            return [lVal, rVal];
        }
        else {
            return lVal.map(function (val) {
                return operateOn(op, val, rVal);
            });
        }
    }
    else if (lValIsObj) {
        if (rValIsArray || !rValIsObj) {
            return [lVal, rVal];
        }
        else {
            return Object.keys(rVal).reduce(function (acc, key) {
                if (acc[key] !== undefined) {
                    acc[key] = operateOn(op, acc[key], rVal[key]);
                }
                else {
                    acc[key] = rVal[key];
                }
                return acc;
            }, Object.keys(lVal).reduce(function (acc, key) {
                acc[key] = lVal[key];
                return acc;
            }, {}));
        }
    }
    else {
        return operateOn(op, lVal, rVal);
    }
}

Operator.define("Addition", {
    symbol:         "+",
    precedence:     0,
    associativity:  "left",
    operation:      commonOperation
});

Operator.define("Subtraction", {
    symbol:         "-",
    precedence:     0,
    associativity:  "left",
    operation:      commonOperation
});

Operator.define("Multiplication", {
    symbol:         "*",
    precedence:     0,
    associativity:  "left",
    operation:      commonOperation
});

Operator.define("Division", {
    symbol:         "/",
    precedence:     0,
    associativity:  "left",
    operation:      commonOperation
});
